{"version":3,"sources":["components/Navbar/NavbarElements.js","components/Navbar/index.js","pages/index.js","components/Footer.js","components/modesfile.ts","components/QuestionsComponent.tsx","components/utils.js","pages/actCh00/data.ts","pages/actCh00/actCh00.tsx","pages/hw01/data.ts","pages/hw01/hw01.tsx","pages/hw02/data.ts","pages/hw02/hw02.tsx","pages/actCh04/data.ts","pages/actCh04/actCh04.tsx","pages/actCh05/data.ts","pages/actCh05/actCh05.tsx","pages/actCh06/data.ts","pages/actCh06/actCh06.tsx","pages/actCh07/data.ts","pages/actCh07/actCh07.tsx","pages/actCh08/data.ts","pages/actCh08/actCh08.tsx","pages/act08Finance/data.ts","pages/act08Finance/act08comp.tsx","App.js","index.tsx"],"names":["Nav","styled","nav","NavLink","Link","Bars","FaBars","NavMenu","div","Navbar","currentDate","Date","startDate","DueDate","React","createElement","Fragment","to","Home","style","display","justifyContent","alignItems","height","Footer","className","modes","mode","icon","Dot","description","Slash","MoveUpRight","MoveDiagonal","Hexagon","RectangleHorizontal","Circle","Pencil","process","Spline","ChartSpline","Type","MousePointer2","QuestionsComponent","_ref","_questions$currentQue","questions","userId","quizName","userAnswers","setUserAnswers","useState","fullname","setFullname","currentQuestionIndex","setCurrentQuestionIndex","showResults","setShowResults","nextButtonClicked","setNextButtonClicked","filteredModes","setFilteredModes","console","log","useEffect","storedAnswers","localStorage","getItem","JSON","parse","forEach","question","index","qtype","drawingKey","initialDrawing","objects","background","setItem","stringify","handleInputChange","questionId","value","prev","x","options","filter","modeObj","includes","marginTop","onClick","window","location","reload","marginBottom","type","onChange","e","target","marginLeft","width","textAlign","padding","margin","length","async","preventDefault","userInputData","map","htmlContent","option","answerText","replace","padEnd","substring","combinedCanvasImage","html2pdf","default","opt","filename","image","quality","html2canvas","scale","jsPDF","unit","format","orientation","from","set","save","handleGeneratePDF","Ref","fontSize","fontWeight","src","alt","maxWidth","href","rel","i","key","name","checked","maxLength","DrawingApp","AssessName","canvasWidth","canvasHeight","handleBack","disabled","mainCanvasId","backgroundCanvasId","mainCanvas","document","getElementById","backgroundCanvas","error","tempCanvas","tempCtx","getContext","drawImage","dataURL","toDataURL","saveCanvasImage2storage","alert","marginRight","quiz","user","data","id","Act00Comp","q","undefined","Hw01Comp","Hw02Comp","Act04Comp","Act05Comp","password","setPassword","isAuthenticated","setIsAuthenticated","Act06Comp","handlePasswordChange","handlePasswordSubmit","onSubmit","ActCh07Comp","ActCh08Comp","Act08Comp","App","Router","Routes","Route","path","element","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.89c1523c.chunk.js","sourcesContent":["// components/Navbar/navbarElements.js\r\n\r\nimport { FaBars } from \"react-icons/fa\";\r\nimport { NavLink as Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Nav = styled.nav`\r\n  background: #63d471;\r\n  height: 85px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 0.2rem calc((100vw - 1000px) / 2);\r\n  z-index: 12;\r\n  /* Third Nav */\r\n  /* justify-content: flex-start; */\r\n`;\r\n\r\nexport const NavLink = styled(Link)`\r\n  color: #808080;\r\n  display: flex;\r\n  align-items: center;\r\n  text-decoration: none;\r\n  padding: 0 1rem;\r\n  height: 100%;\r\n  cursor: pointer;\r\n  &.active {\r\n    color: #000000;\r\n  }\r\n`;\r\n\r\nexport const Bars = styled(FaBars)`\r\n  display: none;\r\n  color: #808080;\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    transform: translate(-100%, 75%);\r\n    font-size: 1.8rem;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const NavMenu = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-right: -24px;\r\n  /* Second Nav */\r\n  /* margin-right: 24px; */\r\n  /* Third Nav */\r\n  /* width: 100vw;\r\n  white-space: nowrap; */\r\n  @media screen and (max-width: 768px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport const NavBtn = styled.nav`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-right: 24px;\r\n  /* Third Nav */\r\n  /* justify-content: flex-end;\r\n  width: 100vw; */\r\n  @media screen and (max-width: 768px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport const NavBtnLink = styled(Link)`\r\n  border-radius: 4px;\r\n  background: #808080;\r\n  padding: 10px 22px;\r\n  color: #000000;\r\n  outline: none;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease-in-out;\r\n  text-decoration: none;\r\n  /* Second Nav */\r\n  margin-left: 24px;\r\n  &:hover {\r\n    transition: all 0.2s ease-in-out;\r\n    background: #fff;\r\n    color: #808080;\r\n  }\r\n`;\r\n","// components/Navbar/index.js\r\n\r\nimport React from \"react\"\r\nimport { Nav, NavLink, Bars, NavMenu } from \"./NavbarElements\"\r\n\r\nconst Navbar = () => {\r\n  const currentDate = new Date()\r\n  const startDate = new Date(\"2025-03-13T13:00:00\")\r\n\r\n  //const act08DueDate = new Date(\"2025-03-12T12:20:00\") // Set the due date for Homework 2 with hours and minutes\r\n  const DueDate = new Date(\"2025-03-13T15:15:00\") // Set the due date for Homework 2 with hours and minutes\r\n\r\n  return (\r\n    <>\r\n      <Nav>\r\n        <Bars />\r\n        <NavMenu>\r\n          <NavLink to=\"/Home\">Home</NavLink>\r\n          {/* <NavLink to=\"/ActCh00\">Ch00</NavLink> */}\r\n          {/*<NavLink to=\"/ActCh04\">Ch4 Activity</NavLink>\r\n          <NavLink to=\"/ActCh05\">Ch5 Activity</NavLink> \r\n\r\n          {/* {currentDate <= hw02DueDate && (\r\n            <NavLink to=\"/ActCh06\">Ch6 Activity</NavLink>\r\n          )} */}\r\n          {/* {currentDate >= startDate && currentDate <= act07DueDate && (\r\n            <NavLink to=\"/ActCh07\">EconGrowthClassActivity</NavLink>\r\n          )} */}\r\n          {/* {currentDate >= startDate && currentDate <= act08DueDate && (\r\n            <NavLink to=\"/ActCh08\"> S&I-ClassA-ctivity</NavLink>\r\n          )} */}\r\n          {currentDate >= startDate && currentDate <= DueDate && (\r\n            <NavLink to=\"/Act08\"> Activity-on-Finance</NavLink>\r\n          )}\r\n          {/* <NavLink to=\"/Hw01\">Homework 1</NavLink> */}\r\n          {/* {currentDate <= hw02DueDate && (\r\n            <NavLink to=\"/Hw02\">Homework 2</NavLink>\r\n          )} */}\r\n        </NavMenu>\r\n      </Nav>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","// pages/index.js\r\n\r\nimport React from \"react\"\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"centre\",\r\n        alignItems: \"centre\",\r\n        height: \"100vh\",\r\n      }}\r\n    >\r\n      <h1>\r\n        Welcome to Econ 21003! Navigate to the Assessment you should access.\r\n      </h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","// Footer.js\r\nimport React from \"react\"\r\nimport \"./Footer.css\" // Optional: for styling\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <p>\r\n        © 2025 aembaye. All rights reserved. No distribution of any material of\r\n        this page\r\n      </p>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import {\r\n  Slash,\r\n  Dot,\r\n  Hexagon,\r\n  RectangleHorizontal,\r\n  Circle,\r\n  Pencil,\r\n  Spline,\r\n  ChartSpline,\r\n  MoveUpRight,\r\n  MoveDiagonal,\r\n  Type,\r\n  MousePointer2,\r\n} from \"lucide-react\"\r\n\r\nexport const modes: any = [\r\n  { mode: \"point\", icon: Dot, description: \"Draw a point\" },\r\n  { mode: \"line\", icon: Slash, description: \"Draw a line\" },\r\n  {\r\n    mode: \"singlearrowhead\",\r\n    icon: MoveUpRight,\r\n    description: \"Draw a single arrowhead\",\r\n  },\r\n  {\r\n    mode: \"doublearrowhead\",\r\n    icon: MoveDiagonal,\r\n    description: \"Draw a double arrowhead\",\r\n  },\r\n  { mode: \"polygon\", icon: Hexagon, description: \"Draw a polygon\" },\r\n  { mode: \"rect\", icon: RectangleHorizontal, description: \"Draw a rectangle\" },\r\n  { mode: \"circle\", icon: Circle, description: \"Draw a circle\" },\r\n  { mode: \"freedraw\", icon: Pencil, description: \"Free draw\" },\r\n  {\r\n    mode: \"coordinate\",\r\n    icon: process.env.PUBLIC_URL + \"/coordicon.svg\",\r\n    description: \"Draw coordinates\",\r\n  },\r\n  { mode: \"curve\", icon: Spline, description: \"Draw a curve\" },\r\n  { mode: \"curve4pts\", icon: ChartSpline, description: \"Draw a 4 pt curve\" },\r\n  { mode: \"text\", icon: Type, description: \"Add text\" },\r\n  {\r\n    mode: \"transform\",\r\n    icon: MousePointer2,\r\n    description: \"Select & move shapes\",\r\n  },\r\n]\r\n\r\n//export default modes\r\n","import React, { useState, useEffect } from \"react\"\r\nimport { DrawingApp } from \"ae-drawable-canvas\"\r\n//import { handleJsonSave, handleGeneratePDF } from \"./utils\";\r\nimport { handleGeneratePDF } from \"./utils\"\r\n//import { fabric } from \"fabric\";\r\n//import { useCanvasStore } from \"./canvas/useCanvasStore\"\r\n//import { saveAs } from \"file-saver\"\r\nimport { modes } from \"./modesfile\"\r\n\r\ninterface QuizProps {\r\n  questions: {\r\n    qtype: string\r\n    question: string\r\n    options?: string[]\r\n    Ref: string | string[]\r\n  }[]\r\n  userId: string | undefined\r\n  quizName: string\r\n}\r\n\r\n// const drawingObj_starter: any = modes.filter((modeObj: any) =>\r\n//   [\"point\"].includes(modeObj.mode)\r\n// )\r\n\r\nconst QuestionsComponent = ({ questions, userId, quizName }: QuizProps) => {\r\n  const [userAnswers, setUserAnswers] = useState<{\r\n    [key: number]: string | number\r\n  }>({})\r\n  const [fullname, setFullname] = useState(\"\")\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\r\n  const [showResults, setShowResults] = useState(false)\r\n  const [nextButtonClicked, setNextButtonClicked] = useState(false)\r\n  const [filteredModes, setFilteredModes] = useState(modes) //useState(modes)  //useState(drawingObj_starter)\r\n\r\n  console.log(\"filteredModes\", filteredModes)\r\n\r\n  useEffect(() => {\r\n    const storedAnswers = localStorage.getItem(\"userAnswers\")\r\n    if (storedAnswers) {\r\n      setUserAnswers(JSON.parse(storedAnswers))\r\n    }\r\n\r\n    questions.forEach((question, index) => {\r\n      if (question.qtype === \"graphing-quest\") {\r\n        const drawingKey = `${quizName}-canvasDrawing-${index}`\r\n        if (!localStorage.getItem(drawingKey)) {\r\n          const initialDrawing = { objects: [], background: \"\" }\r\n          localStorage.setItem(drawingKey, JSON.stringify(initialDrawing))\r\n        }\r\n      }\r\n    })\r\n  }, [questions, quizName])\r\n\r\n  const saveCanvasImage2storage = async (index: number) => {\r\n    const mainCanvasId = `canvas-${index}`\r\n    const backgroundCanvasId = `backgroundimage-canvas-${index}`\r\n\r\n    const mainCanvas = document.getElementById(\r\n      mainCanvasId\r\n    ) as HTMLCanvasElement\r\n    const backgroundCanvas = document.getElementById(\r\n      backgroundCanvasId\r\n    ) as HTMLCanvasElement\r\n\r\n    if (!mainCanvas || !backgroundCanvas) {\r\n      console.error(\"Canvas elements not found\")\r\n      return null\r\n    }\r\n\r\n    const tempCanvas = document.createElement(\"canvas\")\r\n    tempCanvas.width = mainCanvas.width\r\n    tempCanvas.height = mainCanvas.height\r\n    const tempCtx = tempCanvas.getContext(\"2d\")\r\n\r\n    if (!tempCtx) {\r\n      console.error(\"Failed to get 2D context\")\r\n      return null\r\n    }\r\n\r\n    tempCtx.drawImage(\r\n      backgroundCanvas,\r\n      0,\r\n      0,\r\n      tempCanvas.width,\r\n      tempCanvas.height\r\n    )\r\n    tempCtx.drawImage(mainCanvas, 0, 0, tempCanvas.width, tempCanvas.height)\r\n\r\n    const dataURL = tempCanvas.toDataURL(\"image/png\")\r\n    localStorage.setItem(`${quizName}-canvasImage-${index}`, dataURL)\r\n  }\r\n\r\n  const handleInputChange = (questionId: any, value: any) => {\r\n    setUserAnswers((prev) => ({\r\n      ...prev,\r\n      [questionId]: value,\r\n    }))\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (questions[currentQuestionIndex].qtype === \"graphing-quest\") {\r\n      // Now you can use setFilteredModess to update the state\r\n      var x: string[] = questions[currentQuestionIndex].options || []\r\n      setFilteredModes(modes.filter((modeObj: any) => x.includes(modeObj.mode)))\r\n    }\r\n  }, [currentQuestionIndex])\r\n\r\n  const handleNext = async () => {\r\n    setNextButtonClicked(true)\r\n    localStorage.setItem(\"userAnswers\", JSON.stringify(userAnswers))\r\n\r\n    if (questions[currentQuestionIndex].qtype === \"graphing-quest\") {\r\n      await saveCanvasImage2storage(currentQuestionIndex)\r\n      // // Now you can use setFilteredModess to update the state\r\n      // var x: string[] = questions[currentQuestionIndex].options || []\r\n      // setFilteredModes(modes.filter((modeObj: any) => x.includes(modeObj.mode)))\r\n    }\r\n\r\n    if (currentQuestionIndex === questions.length - 2) {\r\n      alert(\r\n        \"Please don't forget to download the PDF and submit it to gradescope after you do the last question. Finishing the assessment may save your work temporarly to your browser but it doesn't submit it to the server where the instructor has access.\"\r\n      )\r\n    }\r\n    if (currentQuestionIndex !== questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1)\r\n    } else {\r\n      setShowResults(true)\r\n    }\r\n  }\r\n\r\n  const handleBack = () => {\r\n    if (currentQuestionIndex > 0) {\r\n      setCurrentQuestionIndex(currentQuestionIndex - 1)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-[100px]\">\r\n      <div className=\"max-w-[1500px] mx-auto w-[90%] flex justify-center py-10 flex-col\">\r\n        <form>\r\n          {!showResults ? (\r\n            <>\r\n              <div style={{ marginBottom: \"30px\" }}>\r\n                <label>\r\n                  Full Name:\r\n                  <input\r\n                    type=\"text\"\r\n                    value={fullname}\r\n                    onChange={(e) => setFullname(e.target.value)}\r\n                    style={{\r\n                      marginLeft: \"10px\",\r\n                      width: \"400px\",\r\n                      height: \"40px\",\r\n                    }}\r\n                  />\r\n                </label>\r\n              </div>\r\n              <div\r\n                style={{\r\n                  textAlign: \"right\",\r\n                  padding: \"20px\",\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"space-between\",\r\n                }}\r\n              >\r\n                <h3 style={{ margin: 0 }}>\r\n                  Question: {currentQuestionIndex + 1}\r\n                  <span>/{questions.length}</span>\r\n                </h3>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={(e) =>\r\n                    handleGeneratePDF(\r\n                      e,\r\n                      questions,\r\n                      userAnswers,\r\n                      fullname,\r\n                      quizName\r\n                    )\r\n                  }\r\n                >\r\n                  {currentQuestionIndex === questions.length - 1\r\n                    ? \"Download PDF File\"\r\n                    : \"Download PDF File\"}\r\n                </button>\r\n              </div>\r\n              <div style={{ marginBottom: \"20px\" }}>\r\n                <div style={{ marginBottom: \"20px\" }}>\r\n                  {questions &&\r\n                    questions.length > 0 &&\r\n                    currentQuestionIndex >= 0 &&\r\n                    questions[currentQuestionIndex].Ref.length > 0 && (\r\n                      <>\r\n                        <div style={{ fontSize: \"24px\", fontWeight: \"bold\" }}>\r\n                          {`${questions[currentQuestionIndex].Ref[3]}`}\r\n                        </div>\r\n                        {questions[currentQuestionIndex].Ref[0] === \"img\" && (\r\n                          <img\r\n                            src={\r\n                              process.env.PUBLIC_URL +\r\n                              \"/\" +\r\n                              questions[currentQuestionIndex].Ref[1]\r\n                            }\r\n                            alt=\"Question Reference\"\r\n                            style={{ maxWidth: \"75%\", marginTop: \"10px\" }}\r\n                          />\r\n                        )}\r\n                        {questions[currentQuestionIndex].Ref[0] ===\r\n                          \"url_link\" && (\r\n                          <>\r\n                            <div>\r\n                              {questions[currentQuestionIndex].Ref[2] && (\r\n                                <span>\r\n                                  {questions[currentQuestionIndex].Ref[2]}&nbsp;\r\n                                </span>\r\n                              )}\r\n                              <a\r\n                                href={questions[currentQuestionIndex].Ref[1]}\r\n                                target=\"_blank\"\r\n                                rel=\"noopener noreferrer\"\r\n                              >\r\n                                {questions[currentQuestionIndex].Ref[1]}\r\n                              </a>\r\n                            </div>\r\n                          </>\r\n                        )}\r\n                      </>\r\n                    )}\r\n                  <br />\r\n                  {currentQuestionIndex < questions.length && (\r\n                    <div style={{ marginTop: \"20px\" }}>\r\n                      <label\r\n                        style={{\r\n                          fontSize: \"20px\",\r\n                        }}\r\n                      >\r\n                        {currentQuestionIndex + 1}.{\" \"}\r\n                        {questions[currentQuestionIndex].question}\r\n                      </label>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                {questions[currentQuestionIndex].qtype === \"mc-quest\" && (\r\n                  <div>\r\n                    {questions[currentQuestionIndex].options?.map(\r\n                      (option, i) => (\r\n                        <div key={i}>\r\n                          <input\r\n                            type=\"radio\"\r\n                            name={`question-${currentQuestionIndex}`}\r\n                            value={option}\r\n                            checked={\r\n                              userAnswers[currentQuestionIndex] === option\r\n                            }\r\n                            onChange={() =>\r\n                              handleInputChange(currentQuestionIndex, option)\r\n                            }\r\n                          />\r\n                          {option}\r\n                        </div>\r\n                      )\r\n                    )}\r\n                  </div>\r\n                )}\r\n                {questions[currentQuestionIndex].qtype ===\r\n                  \"float-num-quest\" && (\r\n                  <div style={{ marginTop: \"10px\" }}>\r\n                    <input\r\n                      type=\"number\"\r\n                      value={userAnswers[currentQuestionIndex] || \"\"}\r\n                      style={{ height: \"35px\", fontSize: \"16px\" }}\r\n                      onChange={(e) =>\r\n                        handleInputChange(currentQuestionIndex, e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                )}\r\n                {questions[currentQuestionIndex].qtype ===\r\n                  \"one-line-text-quest\" && (\r\n                  <div style={{ marginTop: \"10px\" }}>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={userAnswers[currentQuestionIndex] || \"\"}\r\n                      maxLength={150}\r\n                      style={{\r\n                        width: \"90%\",\r\n                        height: \"35px\",\r\n                        fontSize: \"20px\",\r\n                      }}\r\n                      onChange={(e) =>\r\n                        handleInputChange(currentQuestionIndex, e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                )}\r\n                {questions[currentQuestionIndex].qtype ===\r\n                  \"manylines-text-quest\" && (\r\n                  <div style={{ marginTop: \"10px\" }}>\r\n                    <textarea\r\n                      value={userAnswers[currentQuestionIndex] || \"\"}\r\n                      maxLength={1000}\r\n                      style={{\r\n                        width: \"96%\",\r\n                        height: \"200px\",\r\n                        fontSize: \"20px\",\r\n                      }}\r\n                      onChange={(e) =>\r\n                        handleInputChange(currentQuestionIndex, e.target.value)\r\n                      }\r\n                    />\r\n                  </div>\r\n                )}\r\n                {questions[currentQuestionIndex].qtype === \"graphing-quest\" && (\r\n                  <div\r\n                    style={{\r\n                      marginTop: \"50px\",\r\n                      marginLeft: \"50px\",\r\n                      marginBottom: \"500px\",\r\n                    }}\r\n                  >\r\n                    <DrawingApp\r\n                      index={currentQuestionIndex}\r\n                      AssessName={quizName || \"\"}\r\n                      canvasWidth={500}\r\n                      canvasHeight={400}\r\n                      nextButtonClicked={nextButtonClicked}\r\n                      modes={filteredModes}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  marginTop: \"20px\",\r\n                }}\r\n              >\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={handleBack}\r\n                  disabled={currentQuestionIndex === 0}\r\n                >\r\n                  {currentQuestionIndex === 0 ? \"\" : \"← Previous Question\"}\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={handleNext}\r\n                  style={{ marginRight: \"200px\" }}\r\n                >\r\n                  {currentQuestionIndex === questions.length - 1\r\n                    ? \"Finish Assessment\"\r\n                    : \"Next Question →\"}\r\n                </button>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <div className=\"text-center\">\r\n              <div style={{ marginTop: \"20px\" }}>\r\n                <h3> You have successfully completed {quizName} ...! 📈</h3>\r\n              </div>\r\n              <div style={{ marginTop: \"20px\" }}>\r\n                <button onClick={() => window.location.reload()}>\r\n                  Restart Assessement →\r\n                </button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QuestionsComponent\r\n","//type of questions: \"mc-quest\", \"float-num-quest\" , \"one-line-text-quest\", \"manylines-text-quest\", \"graphing-quest\"\r\n\r\n// import { saveAs } from \"file-saver\"\r\n// import html2pdf from \"html2pdf.js\"\r\n//import placeholderDrawing from \"./public/placeholderImage\"\r\n\r\nexport const handleGeneratePDF = async (\r\n  e,\r\n  questions,\r\n  userAnswers,\r\n  fullname,\r\n  quizName\r\n) => {\r\n  e.preventDefault()\r\n\r\n  const userInputData = questions.map((question, index) => ({\r\n    ...question,\r\n    \"user-answer\": userAnswers[index] || \"\",\r\n  }))\r\n\r\n  let htmlContent = `\r\n    <html>\r\n      <head>\r\n        <style>\r\n          body { font-family: Arial, sans-serif; }\r\n          .question { margin-bottom: 20px; }\r\n          .answer { margin-top: 10px; white-space: pre-wrap; }\r\n          .manylines-text-quest { height: 200px; overflow: hidden; }\r\n          .graphing-quest { margin-top: 10px; }\r\n          .graphing-quest img { width: 200px; height: 175px; } /* Adjust the size of the embedded graph */\r\n        </style>\r\n      </head>\r\n      <body>\r\n       <h3 style=\"text-align: center;\">Pdf Report for ${quizName}</h3>\r\n        <h1>Full Name: ${fullname}</h1>\r\n  `\r\n\r\n  userInputData.forEach((question, index) => {\r\n    htmlContent += `\r\n      <div class=\"question\">\r\n        <p>${index + 1}. ${question.question}</p>\r\n    `\r\n\r\n    if (question.qtype === \"mc-quest\") {\r\n      question.options.forEach((option) => {\r\n        htmlContent += `<p>${option}</p>`\r\n      })\r\n    }\r\n\r\n    if (question.qtype === \"manylines-text-quest\") {\r\n      let answerText = `<strong>Answer:</strong> ${question[\"user-answer\"]}`\r\n      answerText = answerText.replace(/\\s\\s+/g, \" \")\r\n\r\n      if (answerText.length < 1000) {\r\n        answerText = answerText.padEnd(1000, \" \")\r\n      } else if (answerText.length > 1000) {\r\n        answerText = answerText.substring(0, 1000) + \"...\"\r\n      }\r\n\r\n      htmlContent += `<div class=\"answer manylines-text-quest\">${answerText}</div>`\r\n    } else if (question.qtype === \"graphing-quest\") {\r\n      const combinedCanvasImage = localStorage.getItem(\r\n        `${quizName}-canvasImage-${index}`\r\n      )\r\n      htmlContent += `<div ><strong>Answer:</strong></div>`\r\n      if (combinedCanvasImage) {\r\n        htmlContent += `<div class=\"answer graphing-quest\"><img src=\"${combinedCanvasImage}\" alt=\"Graphing Answer\" /></div>`\r\n      } else {\r\n        htmlContent += `<div class=\"answer graphing-quest\"><canvas></canvas></div>`\r\n      }\r\n    } else {\r\n      htmlContent += `<div class=\"answer\"> <strong>Answer:</strong> ${question[\"user-answer\"]}</div>`\r\n    }\r\n\r\n    htmlContent += `</div>`\r\n  })\r\n\r\n  htmlContent += `\r\n      </body>\r\n    </html>\r\n  `\r\n\r\n  // Dynamically import html2pdf.js on the client side\r\n  if (typeof window !== \"undefined\") {\r\n    const html2pdf = (await import(\"html2pdf.js\")).default\r\n\r\n    // Convert HTML to PDF\r\n    const opt = {\r\n      margin: [1, 1, 0.5, 1], // top, right, bottom, left margins in inches\r\n      filename: `MyPdfReport4${quizName}.pdf`,\r\n      image: { type: \"jpeg\", quality: 0.98 },\r\n      html2canvas: { scale: 2 },\r\n      jsPDF: { unit: \"in\", format: \"A4\", orientation: \"portrait\" },\r\n    }\r\n\r\n    html2pdf().from(htmlContent).set(opt).save()\r\n  }\r\n}\r\n","export const quiz = {\r\n  //qtype: \"mc-quest\" | \"float-num-quest\" | \"one-line-text-quest\" | \"manylines-text-quest\" | \"graphing-quest\";\r\n  questions: [\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question: \"What is the capital of France\",\r\n      options: [\"A. London\", \"B. Paris\", \"C. Amsterdam\", \"D. Berlin\"],\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"The following is the market for music-downloads. Draw initial demand and supply curves and mark the equilibrium as A. Show on the same graph below the effect of a fall in the price of CDs by shifting the appropriate curve(s)\",\r\n      options: [\"line\", \"point\", \"curve\"],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"The following is the market for music-downloads. Draw initial demand and supply curves and mark the equilibrium as A. Show on the same graph below the effect of a fall in the price of CDs by shifting the appropriate curve(s)\",\r\n      options: [\"line\", \"point\", \"circle\", \"curve\"],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"float-num-quest\",\r\n      question: \"If x=5, what is the value of 2x+3?\",\r\n      options: [],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"As per your graphing, the equilibrium price  and quantity, respectively _______________ and _______________\",\r\n      Ref: \"\",\r\n    },\r\n  ],\r\n}\r\n","import React, { useEffect } from \"react\"\r\n//import React from \"react\"\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"ActCh00\" // Name of the quiz\r\n\r\n//localStorage.setItem(\"quizName\", quizName)\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst Act00Comp = () => {\r\n  // useEffect(() => {\r\n  //   localStorage.setItem(\"quizName\", quizName)\r\n  // }, []) // Empty dependency array ensures this runs only once when the component mounts\r\n\r\n  // const currentDate = new Date()\r\n  // const targetDate = new Date(\"2025-01-30T09:00:00\")\r\n  // const endDate = new Date(\"2025-01-04T23:59:00\")\r\n  // const isAvailable = currentDate >= targetDate && currentDate <= endDate\r\n  const isAvailable = true\r\n  //const questions = quiz.questions // Get questions from the imported quiz data, is a\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarely not available yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        {/* <Quiz questions={questions} userId={userId} quizName={quizName} /> */}\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Act00Comp\r\n","export const quiz = {\r\n  //qtype: \"mc-quest\" | \"float-num-quest\" | \"one-line-text-quest\" | \"manylines-text-quest\" | \"graphing-quest\";\r\n  questions: [\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Draw and label a graph that depicts a downward-sloping demand curve and an upward-sloping supply curve in the market for cocoa, denoting them D1 and S1, respectively. Identify the equilibrium price and quantity for cocoa in your graphs as 'e1'. From the article: 'Farmers in the top cocoa-producing region of the world are reseeding their lands ... The result is higher prices for chocolate lovers and a steep drop in production [of cocoa] from Ivory Coast and Ghana ...' Refer to the graph you drew before. Now show in the same graph using appropriate shift of supply or demand to show how a reseeding of land used to produce cocoa has caused an increase in the price of cocoa\",\r\n      Ref: [\r\n        \"url_link\",\r\n        \"https://www.proquest.com/wire-feeds/cocoa-farmers-uproot-their-plants-despite-record/docview/3152825914/se-2?accountid=8361\",\r\n        \"Read the following article and answer the questions that follow: \",\r\n      ],\r\n    },\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Draw and label a graph that depicts a downward-sloping demand curve and an upward-sloping supply curve in the market chocolate. Identify the equilibrium price and quantity for chocolate in your graphs as e1. From the article: Show graphically why an increase in the price of cocoa has caused an increase in the price of chocolate.\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"From the article: 'John Ato Sackey… grew cocoa for more than 30 years…in… Ghana…But… Sackey pulled up his cocoa trees…[and] is currently planting oil palm seedlings. We’re hoping that palm-oil production will be more… profitable…It’s less susceptible to disease, and it requires less labor…’ Assume that other cocoa farmers in Ghana choose to grow less cocoa and more palm oil. Refer to the graph you drew to answer the previous question to describe the impact on the equilibrium price and quantity of palm oil. In the article John Ato Sackey states: …the market demand for palm oil is high, so we’re hoping to make a good profit from it.' Refer to the graph you drew to answer the previous two questions. An increase in demand will increase the price of palm oil. Would the increase in price cause an increase in the supply or the quantity supplied of palm oil? briefly explain your answer.\",\r\n      Ref: \"\",\r\n    },\r\n  ],\r\n}\r\n","import React, { useEffect } from \"react\"\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"hw01\" // Name of the quiz\r\n//localStorage.setItem(\"quizName\", quizName)\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst Hw01Comp = () => {\r\n  // useEffect(() => {\r\n  //   localStorage.setItem(\"quizName\", quizName)\r\n  // }, []) // Empty dependency array ensures this runs only once when the component mounts\r\n  // const currentDate = new Date()\r\n  // const targetDate = new Date(\"2025-01-30T09:00:00\")\r\n  // const endDate = new Date(\"2025-01-04T23:59:00\")\r\n  // const isAvailable = currentDate >= targetDate && currentDate <= endDate\r\n  const isAvailable = true\r\n  //const questions = quiz.questions // Get questions from the imported quiz data, is a\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarely unavailable yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        {/* <Quiz questions={questions} userId={userId} quizName={quizName} /> */}\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Hw01Comp\r\n","export const quiz = {\r\n  //qtype: \"mc-quest\" | \"float-num-quest\" | \"one-line-text-quest\" | \"manylines-text-quest\" | \"graphing-quest\";\r\n  questions: [\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Using the pencil drawing tool, sketch what the graph looks like. (Sketch means that you don't need to label the axes or numbers, just the shape of the graph.)\",\r\n      Ref: [\r\n        \"url_link\",\r\n        \"https://fred.stlouisfed.org/series/CPIAUCSL\",\r\n        \"Click the following link to view CPI data from FRED, which opens in a new tab.\",\r\n      ],\r\n    },\r\n\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question: \"The series Id for these CPI data is:\",\r\n      Ref: [\r\n        \"url_link\",\r\n        \"https://fred.stlouisfed.org/series/CPIAUCSL\",\r\n        \"Click the following link to view CPI data from FRED, which opens in a new tab.\",\r\n      ],\r\n    },\r\n\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question: \"This is _______ data that has been seasonally adjusted.\",\r\n      options: [\"a. weekly\", \"b. monthly\", \"c. quarterly\", \"d. yearly\"],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"The CPI for January of 2024 (shown as 2024-01-01 in the downloaded data in FRED) was ______ and the CPI for January of 2025 (shown as 2025-01-01 in​ FRED) was ______. Please enter two numbers separated by a comma or semi-colon below, no other stuff.\",\r\n      Ref: [\r\n        \"url_link\",\r\n        \"https://fred.stlouisfed.org/series/CPIAUCSL\",\r\n        \"Click the following link to view CPI data from FRED, which opens in a new tab.\",\r\n      ],\r\n    },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"Using the CPI values you entered above, calculate the inflation rate for the past year. The inflation rate was ______ percent. ​(Round your response to two decimal​ places.) Please enter a number below.\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Using the data from​ FRED, sketch the graphs of the two series above.\",\r\n      Ref: [\r\n        \"url_link\",\r\n        \"https://fred.stlouisfed.org/\",\r\n        \"For this exercise and the questions that follow, you will need to go to the given link below and enter at the search bar the series id for two variables: nominal gross domestic product​ (Series ID: GDP) and real gross domestic product​ (series ID: GDPC1). \",\r\n      ],\r\n    },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"Using the data from​ FRED, enter the values for the fourth quarter of 2024 ​(shown as 2024-10-01 in​ FRED) for the two series, GDP and GDPC1, separating the two figures by comma/semicolon:\",\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"Given these​ values, the GDP deflator for this period is ___ ​(Enter your response rounded to two decimal​ places.) and similarly the GDP price deflator for the fourth quarter of 2023 was _____.​(Enter your response rounded to two decimal​ places.) Using this value along with the index computed above, the year-over-year rate of price inflation was ______ percent. ​(Enter your response rounded to one decimal​ place.) Please enter three numbers separated by a comma or semi-colon below, no other stuff.\",\r\n      Ref: \"\",\r\n    },\r\n  ],\r\n}\r\n","import React, { useEffect } from \"react\"\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"hw02\" // Name of the quiz\r\n//localStorage.setItem(\"quizName\", quizName)\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst Hw02Comp = () => {\r\n  // useEffect(() => {\r\n  //   localStorage.setItem(\"quizName\", quizName)\r\n  // }, []) // Empty dependency array ensures this runs only once when the component mounts\r\n  // const currentDate = new Date()\r\n  // const targetDate = new Date(\"2025-01-30T09:00:00\")\r\n  // const endDate = new Date(\"2025-01-04T23:59:00\")\r\n  // const isAvailable = currentDate >= targetDate && currentDate <= endDate\r\n  const isAvailable = true\r\n  //const questions = quiz.questions // Get questions from the imported quiz data, is a\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarely unavailable yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        {/* <Quiz questions={questions} userId={userId} quizName={quizName} /> */}\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Hw02Comp\r\n","export const quiz = {\r\n  //qtype: \"mc-quest\" | \"float-num-quest\" | \"one-line-text-quest\" | \"manylines-text-quest\" | \"graphing-quest\";\r\n  questions: [\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"The following is the market for music-downloads. Draw initial demand and supply curves and mark the equilibrium as A. Show on the same graph below the effect of a fall in the price of CDs by shifting the appropriate curve(s)\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"As per your graphing, the equilibrium price  and quantity, respectively _______________ and _______________\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"graphing-quest\",\r\n      question:\r\n        \"Similarly, starting from the original equilibrium show the effect of Sellers of music downloads negotiating a reduction in the royalties they must pay for each song they sell.\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"As per your graphing, the equilibrium price  and quantity, respectively _______________ and _______________\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"So what happens if both events occur at the same time? Equilibrium price and quantity, respectively _______________ and _______________\",\r\n      Ref: \"\",\r\n    },\r\n  ],\r\n}\r\n","import React, { useEffect } from \"react\"\r\n//import React from \"react\"\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"ActCh04\" // Name of the quiz\r\n\r\n//localStorage.setItem(\"quizName\", quizName)\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst Act04Comp = () => {\r\n  // useEffect(() => {\r\n  //   localStorage.setItem(\"quizName\", quizName)\r\n  // }, []) // Empty dependency array ensures this runs only once when the component mounts\r\n\r\n  // const currentDate = new Date()\r\n  // const targetDate = new Date(\"2025-01-30T09:00:00\")\r\n  // const endDate = new Date(\"2025-01-04T23:59:00\")\r\n  // const isAvailable = currentDate >= targetDate && currentDate <= endDate\r\n  const isAvailable = true\r\n  //const questions = quiz.questions // Get questions from the imported quiz data, is a\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarely not available yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        {/* <Quiz questions={questions} userId={userId} quizName={quizName} /> */}\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Act04Comp\r\n","export const quiz = {\r\n  //qtype: \"mc-quest\" | \"float-num-quest\" | \"one-line-text-quest\" | \"manylines-text-quest\" | \"graphing-quest\";\r\n  questions: [\r\n    // {\r\n    //   qtype: \"mc-quest\",\r\n    //   question:\r\n    //     \"A fall in prices (of G & S) that increases the real value of consumers' wealth would\",\r\n    //   options: [\r\n    //     \"A. increase AD\",\r\n    //     \"B. decrease AD\",\r\n    //     \"C. increase aggregate ouput demanded\",\r\n    //     \"D. decrease aggregate ouput demanded\",\r\n    //   ],\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"graphing-quest\",\r\n    //   question:\r\n    //     \"Draw the AD-SRAS-LRAS diagram for the U.S. economy starting in a long-run equilibrium. A boom occurs in Canada.  Use your diagram to determine the SR and LR effects on U.S. GDP, the price level, and unemployment.\",\r\n    //   Ref: \"\",\r\n    // },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"A. Using the information in the above table, compute Nominal GDP in 2008 and 2009 & the percentage increase. Please enter the three values by separating them by commas or semicolon. \",\r\n      Ref: [\r\n        \"img\",\r\n        \"fig16bb.png\",\r\n        \"Use the folowing to answer the questions below: \",\r\n      ],\r\n    },\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question: \"Show your work for the previous question. \",\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"B.  Using the information in the above table, compute Real GDP in 2008 and 2009 & the percentage increase. Please enter the three values by separating them by commas or semicolon. \",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question: \"Show your work for the previous question. \",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"C. What part of the percentage increase in NGDP is due to change in prices? Recall that Nominal GDP growth is the growth in production and growth of prices\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"manylines-text-quest\",\r\n      question: \"Show your work for the previous question. \",\r\n      Ref: \"\",\r\n    },\r\n  ],\r\n}\r\n","import React, { useState } from \"react\"\r\n//import React from \"react\"\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"ActCh05\" // Name of the quiz\r\n\r\n//localStorage.setItem(\"quizName\", quizName)\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst Act05Comp = () => {\r\n  const [password, setPassword] = useState(\"\")\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\r\n\r\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setPassword(e.target.value)\r\n  }\r\n\r\n  const handlePasswordSubmit = () => {\r\n    if (password === \"passit\") {\r\n      setIsAuthenticated(true)\r\n    } else {\r\n      alert(\"Incorrect password\")\r\n    }\r\n  }\r\n\r\n  const isAvailable = true\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n\r\n  // if (!isAuthenticated) {\r\n  //   return (\r\n  //     <div className=\"container\">\r\n  //       <h1>Please enter the password to access the quiz</h1>\r\n  //       <form onSubmit={handlePasswordSubmit}>\r\n  //         <input\r\n  //           type=\"password\"\r\n  //           value={password}\r\n  //           onChange={handlePasswordChange}\r\n  //         />\r\n  //         <button type=\"submit\">Submit</button>\r\n  //       </form>\r\n  //     </div>\r\n  //   )\r\n  // }\r\n\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarily not available yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Act05Comp\r\n","export const quiz = {\r\n  //qtype: \"mc-quest\" | \"float-num-quest\" | \"one-line-text-quest\" | \"manylines-text-quest\" | \"graphing-quest\";\r\n  questions: [\r\n    // {\r\n    //   qtype: \"mc-quest\",\r\n    //   question:\r\n    //     \"A fall in prices (of G & S) that increases the real value of consumers' wealth would\",\r\n    //   options: [\r\n    //     \"A. increase AD\",\r\n    //     \"B. decrease AD\",\r\n    //     \"C. increase aggregate ouput demanded\",\r\n    //     \"D. decrease aggregate ouput demanded\",\r\n    //   ],\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"graphing-quest\",\r\n    //   question:\r\n    //     \"Draw the AD-SRAS-LRAS diagram for the U.S. economy starting in a long-run equilibrium. A boom occurs in Canada.  Use your diagram to determine the SR and LR effects on U.S. GDP, the price level, and unemployment.\",\r\n    //   Ref: \"\",\r\n    // },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"A. Using the information in the above table, compute CPI for the three years and the three values by separating them by commas or semicolon. \",\r\n      Ref: [\r\n        \"img\",\r\n        \"actCpi.png\",\r\n        \"Use the folowing to answer the questions below; assume the basket is 4 hot dogs and 2 hamburgers. \",\r\n      ],\r\n    },\r\n\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"B.  Using the information in the above table, compute inflation between the years and please enter the two values by separating them by commas or semicolon. \",\r\n      Ref: \"\",\r\n    },\r\n    // {\r\n    //   qtype: \"manylines-text-quest\",\r\n    //   question: \"Show your work for the previous question. \",\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"one-line-text-quest\",\r\n    //   question:\r\n    //     \"C. What part of the percentage increase in NGDP is due to change in prices? Recall that Nominal GDP growth is the growth in production and growth of prices\",\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"manylines-text-quest\",\r\n    //   question: \"Show your work for the previous question. \",\r\n    //   Ref: \"\",\r\n    // },\r\n  ],\r\n}\r\n","import React, { useState } from \"react\"\r\n//import React from \"react\"\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"ActCh06\" // Name of the quiz\r\n\r\n//localStorage.setItem(\"quizName\", quizName)\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst Act06Comp = () => {\r\n  const [password, setPassword] = useState(\"\")\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\r\n\r\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setPassword(e.target.value)\r\n  }\r\n\r\n  const handlePasswordSubmit = () => {\r\n    if (password === \"econ101\") {\r\n      setIsAuthenticated(true)\r\n    } else {\r\n      alert(\"Incorrect password\")\r\n    }\r\n  }\r\n\r\n  const isAvailable = true\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Please enter the password to access the quiz</h1>\r\n        <form onSubmit={handlePasswordSubmit}>\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={handlePasswordChange}\r\n          />\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarily not available yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Act06Comp\r\n","export const quiz = {\r\n  //qtype: \"mc-quest\" | \"float-num-quest\" | \"one-line-text-quest\" | \"manylines-text-quest\" | \"graphing-quest\";\r\n  questions: [\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question: \"A nation's standard of living is best measured by its \",\r\n      options: [\r\n        \"a.\treal GDP.\",\r\n        \"b.\treal GDP per person.\",\r\n        \"c.\tnominal GDP. \",\r\n        \"d.\tnominal GDP per person. \",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question:\r\n        \"The one variable that stands out as the most significant explanation of large variations in living standards around the world is \",\r\n      options: [\r\n        \"a.\tproductivity. \",\r\n        \"b.\tpopulation. \",\r\n        \"c.\tpreferences.  \",\r\n        \"d.\tprices.\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question: \"Which of the following is human capital?\",\r\n      options: [\r\n        \"a. a student loan\",\r\n        \"b. understanding how to use a company's accounting software\",\r\n        \"c. training videos for new corporate employees\",\r\n        \"d. All of the above are correct.\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question: \"If there are diminishing returns to capital, then\",\r\n      options: [\r\n        \"a. capital produces fewer goods as it ages.\",\r\n        \"b. old ideas are not as useful as new ones.\",\r\n        \"c. increases in the capital stock eventually decrease output.\",\r\n        \"d. increases in the capital stock increase output by ever smaller amounts.\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question:\r\n        \"Other things the same, if a country increased its saving rate, in 100 years or so it would likely have\",\r\n      options: [\r\n        \"a. higher productivity, and a higher growth rate of real GDP.\",\r\n        \"b. higher productivity, but not a higher growth rate of real GDP.\",\r\n        \"c. the same productivity and growth of real GDP it began with.\",\r\n        \"d. None of the above is correct.\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n\r\n    // {\r\n    //   qtype: \"graphing-quest\",\r\n    //   question:\r\n    //     \"Draw the AD-SRAS-LRAS diagram for the U.S. economy starting in a long-run equilibrium. A boom occurs in Canada.  Use your diagram to determine the SR and LR effects on U.S. GDP, the price level, and unemployment.\",\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"one-line-text-quest\",\r\n    //   question:\r\n    //     \"A. Using the information in the above table, compute CPI for the three years and the three values by separating them by commas or semicolon. \",\r\n    //   Ref: [\r\n    //     \"img\",\r\n    //     \"actCpi.png\",\r\n    //     \"Use the folowing to answer the questions below; assume the basket is 4 hot dogs and 2 hamburgers. \",\r\n    //   ],\r\n    // },\r\n\r\n    // {\r\n    //   qtype: \"one-line-text-quest\",\r\n    //   question:\r\n    //     \"B.  Using the information in the above table, compute inflation between the years and please enter the two values by separating them by commas or semicolon. \",\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"manylines-text-quest\",\r\n    //   question: \"Show your work for the previous question. \",\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"one-line-text-quest\",\r\n    //   question:\r\n    //     \"C. What part of the percentage increase in NGDP is due to change in prices? Recall that Nominal GDP growth is the growth in production and growth of prices\",\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"manylines-text-quest\",\r\n    //   question: \"Show your work for the previous question. \",\r\n    //   Ref: \"\",\r\n    // },\r\n  ],\r\n}\r\n","import React, { useState } from \"react\"\r\n//import React from \"react\"\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"ActCh07\" // Name of the quiz\r\n\r\n//localStorage.setItem(\"quizName\", quizName)\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst ActCh07Comp = () => {\r\n  const [password, setPassword] = useState(\"\")\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\r\n\r\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setPassword(e.target.value)\r\n  }\r\n\r\n  const handlePasswordSubmit = () => {\r\n    if (password === \"9849\") {\r\n      setIsAuthenticated(true)\r\n    } else {\r\n      alert(\"Incorrect password\")\r\n    }\r\n  }\r\n\r\n  const isAvailable = true\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Please enter the password to access the quiz</h1>\r\n        <form onSubmit={handlePasswordSubmit}>\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={handlePasswordChange}\r\n          />\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarily not available yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ActCh07Comp\r\n","export const quiz = {\r\n  questions: [\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question:\r\n        \"Institutions that help to match one person's saving with another person's investment are collectively called the\",\r\n      options: [\r\n        \"a. Federal Reserve system.\",\r\n        \"b. financial system.\",\r\n        \"c. monetary system.\",\r\n        \"d. banking system.\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question: \"A bond buyer is a\",\r\n      options: [\r\n        \"a. saver. Bond buyers must hold their bonds until maturity.\",\r\n        \"b. saver. Bond buyers may sell their bonds prior to maturity.\",\r\n        \"c. borrower. Bond buyers must hold their bonds until maturity.\",\r\n        \"d. borrower. Bond buyers may sell their bonds prior to maturity.\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question:\r\n        \"On which of these bonds is the prospect of default most likely?\",\r\n      options: [\r\n        \"a. a junk bond\",\r\n        \"b. a municipal bond\",\r\n        \"c. a U.S. government bond\",\r\n        \"d. a corporate bond issued by Microsoft\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question: \"In a closed economy, national saving equals\",\r\n      options: [\r\n        \"a. income minus the sum of consumption and government purchases.\",\r\n        \"b. private saving plus public saving.\",\r\n        \"c. investment.\",\r\n        \"d. All of the above are correct.\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question: \"In the language of macroeconomics, investment refers to\",\r\n      options: [\r\n        \"a. saving.\",\r\n        \"b. the purchase of new capital.\",\r\n        \"c. the purchase of stocks, bonds, or mutual funds.\",\r\n        \"d. All of the above are correct.\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question:\r\n        \"Scenario 1. Assume the following information for an imaginary, closed economy.\\n\\nGDP = $200,000; consumption = $120,000;\\ngovernment purchases = $35,000; and taxes = $25,000.\\n\\nRefer to Scenario 1. For this economy, national saving is equal to\",\r\n      options: [\"a. $30,000.\", \"b. $35,000.\", \"c. $45,000.\", \"d. $60,000.\"],\r\n      Ref: \"\",\r\n    },\r\n\r\n    // {\r\n    //   qtype: \"graphing-quest\",\r\n    //   question:\r\n    //     \"Draw the AD-SRAS-LRAS diagram for the U.S. economy starting in a long-run equilibrium. A boom occurs in Canada.  Use your diagram to determine the SR and LR effects on U.S. GDP, the price level, and unemployment.\",\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"one-line-text-quest\",\r\n    //   question:\r\n    //     \"A. Using the information in the above table, compute CPI for the three years and the three values by separating them by commas or semicolon. \",\r\n    //   Ref: [\r\n    //     \"img\",\r\n    //     \"actCpi.png\",\r\n    //     \"Use the folowing to answer the questions below; assume the basket is 4 hot dogs and 2 hamburgers. \",\r\n    //   ],\r\n    // },\r\n\r\n    // {\r\n    //   qtype: \"one-line-text-quest\",\r\n    //   question:\r\n    //     \"B.  Using the information in the above table, compute inflation between the years and please enter the two values by separating them by commas or semicolon. \",\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"manylines-text-quest\",\r\n    //   question: \"Show your work for the previous question. \",\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"one-line-text-quest\",\r\n    //   question:\r\n    //     \"C. What part of the percentage increase in NGDP is due to change in prices? Recall that Nominal GDP growth is the growth in production and growth of prices\",\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"manylines-text-quest\",\r\n    //   question: \"Show your work for the previous question. \",\r\n    //   Ref: \"\",\r\n    // },\r\n  ],\r\n}\r\n","import React, { useState } from \"react\"\r\n//import React from \"react\"\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"ActCh08\" // Name of the quiz\r\n\r\n//localStorage.setItem(\"quizName\", quizName)\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst ActCh08Comp = () => {\r\n  const [password, setPassword] = useState(\"\")\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\r\n\r\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setPassword(e.target.value)\r\n  }\r\n\r\n  const handlePasswordSubmit = () => {\r\n    if (password === \"22022\") {\r\n      setIsAuthenticated(true)\r\n    } else {\r\n      alert(\"Incorrect password\")\r\n    }\r\n  }\r\n\r\n  const isAvailable = true\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Please enter the password to access the quiz</h1>\r\n        <form onSubmit={handlePasswordSubmit}>\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={handlePasswordChange}\r\n          />\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarily not available yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ActCh08Comp\r\n","export const quiz = {\r\n  questions: [\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"B.  A bond pays $6,000 in 20 years when it matures, no payments in between (zero coupon bond). Similarly bond B pays also $6,000 but in 40 years. If the interest rate is 5%, what is the maximum an economist would pay for each? Enter your answer as two numbers separated by with semicolon. [Hint: You can actual answer the question without calculator by applying the rule of 70.]\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"B.  Based on the information in the previous quesiton, if interest rate now increases to 7%, What would be each bond's price now? Enter your answer as two numbers separated by with semicolon. \",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"mc-quest\",\r\n      question:\r\n        \"Based on your answers to previous questions, what can you say about the relationship between bond price and interest rate? \",\r\n      options: [\r\n        \"a. The value of a bond increases when the interest rate increases, and bonds with shorter times to maturity are more sensitive to changes in the interest rate.\",\r\n        \"b. The value of a bond falls when the interest rate increases, and bonds with a longer time to maturity are more sensitive to changes in the interest rate.\",\r\n        \"c. The value of a bond is unaffected by changes in the interest rate, and bonds with longer times to maturity are less sensitive to interest rate changes.\",\r\n        \"d. The value of a bond falls when the interest rate decreases, and bonds with shorter times to maturity are more sensitive to interest rate changes.\",\r\n      ],\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"In the deal-or-no-deal show, Howie Mandel offers a contestant to walk out with $4 million (Plan A) or continue to play to win $10 million with probability of 0.2 and \\$2.5 milion with probability of 0.8. Which plan has higher expected value? (Enter A or B)\",\r\n      Ref: \"\",\r\n    },\r\n    {\r\n      qtype: \"one-line-text-quest\",\r\n      question:\r\n        \"B. If the contestant's utility function is given by U= W^(0.5), Which plan would he/she choose? (Enter A or B)\",\r\n      Ref: \"\",\r\n    },\r\n    // {\r\n    //   qtype: \"graphing-quest\",\r\n    //   question:\r\n    //     \"Draw the AD-SRAS-LRAS diagram for the U.S. economy starting in a long-run equilibrium. A boom occurs in Canada.  Use your diagram to determine the SR and LR effects on U.S. GDP, the price level, and unemployment.\",\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"one-line-text-quest\",\r\n    //   question:\r\n    //     \"A. Using the information in the above table, compute CPI for the three years and the three values by separating them by commas or semicolon. \",\r\n    //   Ref: [\r\n    //     \"img\",\r\n    //     \"actCpi.png\",\r\n    //     \"Use the folowing to answer the questions below; assume the basket is 4 hot dogs and 2 hamburgers. \",\r\n    //   ],\r\n    // },\r\n\r\n    // {\r\n    //   qtype: \"one-line-text-quest\",\r\n    //   question:\r\n    //     \"B.  Using the information in the above table, compute inflation between the years and please enter the two values by separating them by commas or semicolon. \",\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"manylines-text-quest\",\r\n    //   question: \"Show your work for the previous question. \",\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"one-line-text-quest\",\r\n    //   question:\r\n    //     \"C. What part of the percentage increase in NGDP is due to change in prices? Recall that Nominal GDP growth is the growth in production and growth of prices\",\r\n    //   Ref: \"\",\r\n    // },\r\n    // {\r\n    //   qtype: \"manylines-text-quest\",\r\n    //   question: \"Show your work for the previous question. \",\r\n    //   Ref: \"\",\r\n    // },\r\n  ],\r\n}\r\n","import React, { useState } from \"react\"\r\n//import React from \"react\"\r\nimport QuestionsComponent from \"../../components/QuestionsComponent\"\r\nimport { quiz } from \"./data\" // Import the quiz data from data2.ts\r\n\r\nconst quizName = \"Act08finance2\" // Name of the quiz\r\n\r\n//localStorage.setItem(\"quizName\", quizName)\r\n\r\nconst user = {\r\n  data: {\r\n    user: {\r\n      id: \"1345\",\r\n    },\r\n  },\r\n}\r\n\r\nconst Act08Comp = () => {\r\n  const [password, setPassword] = useState(\"\")\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\r\n\r\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setPassword(e.target.value)\r\n  }\r\n\r\n  const handlePasswordSubmit = () => {\r\n    if (password === \"44556\") {\r\n      setIsAuthenticated(true)\r\n    } else {\r\n      alert(\"Incorrect password\")\r\n    }\r\n  }\r\n\r\n  const isAvailable = true\r\n  const questions = quiz.questions.filter((q) => q !== undefined) // Filter out undefined elementslist\r\n  const userId = user?.data.user.id\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Please enter the password to access the quiz</h1>\r\n        <form onSubmit={handlePasswordSubmit}>\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={handlePasswordChange}\r\n          />\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (!isAvailable) {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Quiz is temporarily not available yet</h1>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        <QuestionsComponent\r\n          questions={questions}\r\n          userId={userId}\r\n          quizName={quizName}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Act08Comp\r\n","// App.js\r\nimport React from \"react\"\r\n//import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\"\r\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\"\r\nimport \"./App.css\"\r\nimport Navbar from \"./components/Navbar\"\r\nimport Home from \"./pages\"\r\nimport Footer from \"./components/Footer\" // Import the Footer component\r\nimport Act00Comp from \"./pages/actCh00/actCh00\"\r\nimport Hw01Comp from \"./pages/hw01/hw01\"\r\nimport Hw02Comp from \"./pages/hw02/hw02\"\r\nimport Act04Comp from \"./pages/actCh04/actCh04\"\r\nimport Act05Comp from \"./pages/actCh05/actCh05\"\r\nimport Act06Comp from \"./pages/actCh06/actCh06\"\r\nimport ActCh07Comp from \"./pages/actCh07/actCh07\"\r\nimport ActCh08Comp from \"./pages/actCh08/actCh08\"\r\nimport Act08Comp from \"./pages/act08Finance/act08comp\"\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"app\">\r\n        <Navbar />\r\n        <div className=\"content\">\r\n          <Routes>\r\n            <Route path=\"/Home\" element={<Home />} />\r\n            <Route path=\"/ActCh00\" element={<Act00Comp />} />\r\n            <Route path=\"/ActCh04\" element={<Act04Comp />} />\r\n            <Route path=\"/HW01\" element={<Hw01Comp />} />\r\n            <Route path=\"/HW02\" element={<Hw02Comp />} />\r\n            <Route path=\"/ActCh05\" element={<Act05Comp />} />\r\n            <Route path=\"/ActCh06\" element={<Act06Comp />} />\r\n            <Route path=\"/ActCh07\" element={<ActCh07Comp />} />\r\n            <Route path=\"/ActCh08\" element={<ActCh08Comp />} />\r\n            <Route path=\"/Act08\" element={<Act08Comp />} />\r\n          </Routes>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","//index.tsx\r\nimport React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\n//import ReactDOM from \"react-dom/client\";\r\nimport App from \"./App\"\r\nimport \"./index.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />,\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}